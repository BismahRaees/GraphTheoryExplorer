//Asymmetric Pairs
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

using namespace std;

const int MAX_STUDENTS = 50;
const int MAX_FRIENDS = 10;

int findStudentIndex(string students[MAX_STUDENTS], int studentCount, const string& name) {
    for (int i = 0; i < studentCount; i++) {
        if (students[i] == name) {
            return i;
        }
    }
    return -1;
}

void findAsymmetricPairs(string students[MAX_STUDENTS], string friendships[MAX_STUDENTS][MAX_FRIENDS],
                         int studentCount, int friendCounts[MAX_STUDENTS]) {
    cout << "Asymmetric pairs:\n";

    for (int i = 0; i < studentCount; i++) {
        for (int j = 0; j < friendCounts[i]; j++) {
            string friendName = friendships[i][j];
            int friendIndex = findStudentIndex(students, studentCount, friendName);

            bool found = false;
            if (friendIndex != -1) {
                for (int k = 0; k < friendCounts[friendIndex]; k++) {
                    if (friendships[friendIndex][k] == students[i]) {
                        found = true;
                        break;
                    }
                }
            }

            if (!found) {
                cout << "(" << students[i] << ", " << friendName << ")\n";
            }
        }
    }
}

int main() {
    ifstream myfile("C:\\Friends Dataset.csv");
    if (!myfile) {
        cerr << "Could not open file." << endl;
        return 1;
    }

    string students[MAX_STUDENTS];
    string friendships[MAX_STUDENTS][MAX_FRIENDS];
    int friendCounts[MAX_STUDENTS] = {0};
    int studentCount = 0;

    string line;
    bool isHeader = true;
    while (getline(myfile, line)) {
        if (isHeader) {
            isHeader = false;
            continue;
        }

        stringstream ss(line);
        string studentName, friendName;
        getline(ss, studentName, ',');

        students[studentCount] = studentName;

        int friendIndex = 0;
        while (getline(ss, friendName, ',')) {
            if (!friendName.empty()) {
                friendships[studentCount][friendIndex++] = friendName;
            }
        }
        friendCounts[studentCount] = friendIndex;
        studentCount++;
    }

    myfile.close();
    findAsymmetricPairs(students, friendships, studentCount, friendCounts);

 return 0;

}
